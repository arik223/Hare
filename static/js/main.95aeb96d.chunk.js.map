{"version":3,"sources":["Components/Superhero/superhero.svg","Components/Superhero/Superhero.js","Pages/Home/Home.js","Routes.js","serviceWorker.js","Components/Navigation/Navigation.js","Main.js","index.js"],"names":["module","exports","Superhero","className","src","superhero","alt","Homepage","Routes","exact","path","component","sensitive","Boolean","window","location","hostname","match","NavigationItem","url","label","to","Navigation","Main","props","children","history","createHistory","console","log","process","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,uC,2OCmC5BC,G,MA9BG,WAChB,OACE,yBAAKC,UAAU,aACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,mBAAf,QAGA,yBAAKC,IAAKC,IAAWC,IAAI,mBCHtBC,EANE,WACf,OACE,kBAAC,EAAD,OCiBWC,EAhBA,WAGb,OACE,6BACA,kBAAC,IAAD,CAAOC,OAAO,EAAMC,KAAK,IAAIC,UAAWJ,IACxC,kBAAC,IAAD,CAAOK,WAAS,EAACF,KAAK,SAASC,UAAWJ,IAC1C,kBAAC,IAAD,CAAOK,WAAS,EAACF,KAAK,QAAQC,UAAWJ,IACzC,kBAAC,IAAD,CAAOK,WAAS,EAACF,KAAK,SAASC,UAAWJ,IAC1C,kBAAC,IAAD,CAAOK,WAAS,EAACF,KAAK,SAASC,UAAWJ,M,iBCH1BM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gBCKAC,EAAiB,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,MAC1B,OACI,yBAAKjB,UAAU,YACX,yBAAKA,UAAU,SACX,kBAAC,IAAD,CAAMkB,GAAIF,GACLC,MAONE,EA/BI,WACjB,OACE,yBAAKnB,UAAU,cACX,yBAAKA,UAAU,iBACX,kBAAC,EAAD,CAAgBgB,IAAK,IAAKC,MAAO,SACjC,kBAAC,EAAD,CAAgBD,IAAK,QAASC,MAAO,SACrC,kBAAC,EAAD,CAAgBD,IAAK,SAAUC,MAAO,UACtC,kBAAC,EAAD,CAAgBD,IAAK,SAAUC,MAAO,UACtC,kBAAC,EAAD,CAAgBD,IAAK,SAAUC,MAAO,aCQnCG,MAdf,SAAcC,GACZ,OACE,yBAAKrB,UAAU,OAIb,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACZqB,EAAMC,YCFTC,EAAUC,MAEhBC,QAAQC,IAAIC,SACZC,IAASC,OACP,kBAAC,IAAD,CAAeN,QAASA,EAASO,SAAUH,SACzC,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJI,SAASC,eAAe,SH8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLf,QAAQe,MAAMA,EAAMC,c","file":"static/js/main.95aeb96d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/superhero.2f672f46.svg\";","import React from \"react\"\nimport { Link } from \"react-router-dom\"\nimport superhero from './superhero.svg'\nimport './Superhero.css'\n\nconst Superhero = () => {\n  return (\n    <div className='superhero'>\n        <div className='superhero-container'>\n            <div className='superhero-label'>\n                HARE\n            </div>\n            <img src={superhero} alt=\"React Logo\" />\n        </div>\n        {/* <Link to={'/'} >HOME</Link>\n        <Link to=\"/Tour\">TOUR</Link>\n        <Link to=\"/Merch\">MERCH</Link>\n        <Link to=\"/Music\">MUSIC</Link>\n        <Link to=\"/About\">ABOUT</Link> */}\n    </div>\n  )\n}\n\nconst Image = ({url, label}) => {\n    return (\n        <div className='nav-item'>\n            <div className='label'>\n                <Link to={url}> \n                    {label}\n                </Link>\n            </div>\n        </div>\n    )\n}\n\nexport default Superhero","import React from \"react\"\nimport Superhero from '../../Components/Superhero/Superhero'\n\nconst Homepage = () => {\n  return (\n    <Superhero />\n  )\n}\n\nexport default Homepage","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport Homepage from './Pages/Home/Home'\nimport Music from './Pages/Music/Music'\nimport Tours from './Pages/Tours/Tours'\n\nconst Routes = () => {\n  const baseName = process.env.PUBLIC_URL\n\n  return (\n    <div>\n    <Route exact={true} path=\"/\" component={Homepage} />\n    <Route sensitive path=\"/Music\" component={Homepage} />\n    <Route sensitive path=\"/Tour\" component={Homepage} />\n    <Route sensitive path=\"/Merch\" component={Homepage} />\n    <Route sensitive path=\"/About\" component={Homepage} />\n\n    \n    </div>\n  )\n}\n\nexport default Routes","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport { Link } from \"react-router-dom\"\nimport './Navigation.css'\n\nconst Navigation = () => {\n  return (\n    <div className='navigation'>\n        <div className='items-wrapper'>\n            <NavigationItem url={'/'} label={'HOME'} />\n            <NavigationItem url={'/Tour'} label={'TOUR'} />\n            <NavigationItem url={'/Merch'} label={'MERCH'} />\n            <NavigationItem url={'/Music'} label={'MUSIC'} />\n            <NavigationItem url={'/About'} label={'ABOUT'} />\n        </div>\n        {/* <Link to={'/'} >HOME</Link>\n        <Link to=\"/Tour\">TOUR</Link>\n        <Link to=\"/Merch\">MERCH</Link>\n        <Link to=\"/Music\">MUSIC</Link>\n        <Link to=\"/About\">ABOUT</Link> */}\n    </div>\n  )\n}\n\nconst NavigationItem = ({url, label}) => {\n    return (\n        <div className='nav-item'>\n            <div className='label'>\n                <Link to={url}> \n                    {label}\n                </Link>\n            </div>\n        </div>\n    )\n}\n\nexport default Navigation","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Navigation from './Components/Navigation/Navigation'\n// import Routes from './Routes'\n\nfunction Main(props) {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        Nav goes here\n      </header> */}\n      <Navigation/>\n      <div className='container'>\n        {props.children}\n      </div>\n    </div>\n  );\n}\n\nexport default Main\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport Routes from \"./Routes\"\nimport { Router, BrowserRouter } from \"react-router-dom\"\n// import { useRouterHistory } from 'react-router'\nimport createHistory from 'history/createBrowserHistory'\nimport * as serviceWorker from \"./serviceWorker\"\nimport Main from './Main'\n// const history = useRouterHistory(createHistory)({\n//   basename: process.env.PUBLIC_URL\n// })\nconst history = createHistory()\n\nconsole.log(process.env.PUBLIC_URL)\nReactDOM.render(\n  <BrowserRouter history={history} basename={process.env.PUBLIC_URL}>\n    <Main>\n      <Routes />\n    </Main>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n)\n\nserviceWorker.unregister()"],"sourceRoot":""}